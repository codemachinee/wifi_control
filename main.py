import telebot
from scapy.all import ARP, sniff
import multiprocessing
from apscheduler.schedulers.background import BackgroundScheduler
import subprocess

from paswords import *
from database import *

token = lemonade
# token = major_suetolog
i_face = "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å 2"
bot = telebot.TeleBot(token)
#filterlist = ['54:48:e6:ed:80:76', '00:00:00:00:00:00']

admin_id = admin_id


def handle_arp(pkt):
    if ARP in pkt and pkt[ARP].op in (1, 2):
        if database().search_in_table(table='users', search_mac=pkt[ARP].hwsrc)[0] is True:
            pass
        elif database().search_in_table(table='main', search_mac=pkt[ARP].hwsrc)[0] is True:
            database().update_table("users", pkt[ARP].hwsrc, pkt[ARP].psrc,
                                    database().search_in_table(table='main', search_mac=pkt[ARP].hwsrc)[1])
            print(f'{database().search_in_table(table="main", search_mac=pkt[ARP].hwsrc)[1]} '
                  f'–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º: {pkt[ARP].hwsrc}')
            bot.send_message(admin_id, f'üü¢ {database().search_in_table(table="main", search_mac=pkt[ARP].hwsrc)[1]} '
                                       f' –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º: {pkt[ARP].hwsrc}')
        else:
            database().update_table("users", pkt[ARP].hwsrc, pkt[ARP].psrc,
                                    database().search_in_table(table='main', search_mac=pkt[ARP].hwsrc)[1])
            print(f'–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º: {pkt[ARP].hwsrc}')
            bot.send_message(admin_id, f'üü¢ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º: {pkt[ARP].hwsrc}')


def check_users():
    print('check_users')
    for i in database().return_all('users'):
        ping = ping_cheking(i[1])
        if ping == 1:
            pass
        
        elif ping == 0:
            print(f'{i[2]} c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º {i[0]} –æ—Ç–∫–ª—é—á–∏–ª—Å—è')
            bot.send_message(admin_id, f'üî¥ {i[2]} c –º–∞–∫ –∞–¥—Ä–µ—Å–æ–º {i[0]} –æ—Ç–∫–ª—é—á–∏–ª—Å—è')
            database().delete_user('users', i[0])
        elif ping == 2:
            print(f'–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')
            bot.send_message(admin_id, f'–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')


def ping_cheking(target_ip):
# –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥
    ping_result = subprocess.run(["ping", '-n', "2", target_ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                 text=True)
# –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∏–Ω–≥–∞
    ping_exit_code = ping_result.stdout.encode('windows-1251').decode('cp866')
    print(ping_exit_code)
    if ping_exit_code.count('–ó–∞–¥–∞–Ω–Ω—ã–π —É–∑–µ–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.') >= 1:
        return 0
    elif ping_exit_code.find('–ü—Ä–µ–≤—ã—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞.') != -1:
        return 1
    elif ping_exit_code.find('—á–∏—Å–ª–æ –±–∞–π—Ç=') != -1:
        return 1
    else:
        return 2


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, ('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±–æ—Ç–æ–º:\n'
                                       '/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞\n'
                                       '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n'
                                       '/monitor - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ wifi'))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '''–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É''')


@bot.message_handler(commands=['monitor'])
def monitor(message):
    for i in database().return_all('users'):
        bot.send_message(message.chat.id, f'MAC: {i[0]} - –≤–ª–∞–¥–µ–ª–µ—Ü: {i[2]}')


def monitoring():
    while True:
        sniff(prn=handle_arp, filter='arp', store=0, iface=i_face)
        print('monitor')


if __name__ == '__main__':
    database().delete_all('users')
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_users, "interval", seconds=30)
    scheduler.start()
    monitor_process = multiprocessing.Process(target=monitoring)
    monitor_process.start()
    bot.infinity_polling()
